API V4
The latest lightning fast API V4

Quote
URL: https://open-api.openocean.finance/v4/:chain/quote

Method: get

Params:

parameter
type
example
description
chain

string

bsc or 56

Chain name or Chain ID (support chain)

inTokenAddress

string

0x783C08b5F26E3daf8C4681F3bf49844e425b6393

token address

outTokenAddress

string

0xD81D45E7635400dDD9c028839e9a9eF479006B28

out token address

amount

string

5

token amount (without decimals)

e.g. 
1.00 ETH set as 1

1.23 USDC set as 1.23

gasPrice

string

5

Please set the gas price in GWEI without decimals

e.g. 14 GWEI set as 14

disabledDexIds

string (Optional）

1

Enter the 'index' number of dexs through dexList endpoint to disable single or multiple dexs separated by commas, e.g. disabledDexIds: "2,6,9".

enabledDexIds

string (Optional）

1

Enter the 'index' number of dexs through dexList. 

Note: enableDexIds has higher priority compared with disabledDexIds

Example:

Request 

Copy
https://open-api.openocean.finance/v4/bsc/quote?inTokenAddress=0x55d398326f99059ff775485246999027b3197955&outTokenAddress=0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d&amount=5&gasPrice=1
Response:

Copy
{
    "code": 200,
    "data": {
        "inToken": {
            "address": "0x55d398326f99059ff775485246999027b3197955",
            "decimals": 18,
            "symbol": "USDT",
            "name": "Tether USD",
            "usd": "0.998546",
            "volume": 4.99273
        },
        "outToken": {
            "address": "0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d",
            "decimals": 18,
            "symbol": "USDC",
            "name": "USD Coin",
            "usd": "0.999955",
            "volume": 4.993697212299812
        },
        "inAmount": "5000000000000000000",
        "outAmount": "4993921938787056372",
        "estimatedGas": "129211",
        "dexes": [
            {
                "dexIndex": 0,
                "dexCode": "Pancake",
                "swapAmount": "4979841669990999203"
            },
            {
                "dexIndex": 1,
                "dexCode": "PancakeV2",
                "swapAmount": "4974920727654969974"
            },
            {
                "dexIndex": 3,
                "dexCode": "Bakery",
                "swapAmount": "755767313321589992"
            },
            ...
        ],
        "path": {
            "from": "0x55d398326f99059fF775485246999027B3197955",
            "to": "0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d",
            "parts": 10,
            "routes": [
                {
                    "parts": 10,
                    "percentage": 100,
                    "subRoutes": [
                        {
                            "from": "0x55d398326f99059fF775485246999027B3197955",
                            "to": "0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d",
                            "parts": 25,
                            "dexes": [
                                {
                                    "dex": "PancakeV3",
                                    "id": "0x92b7807bF19b7DDdf89b706143896d05228f3121",
                                    "parts": 25,
                                    "percentage": 100
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "save": -0.0018,
        "price_impact": "0.01%"
    }
}
JavaScript Demo
Copy
const axios = require('axios');
const chain = 'bsc';
const url = `https://open-api.openocean.finance/v4/${chain}/quote`;
const params = {
    inTokenAddress: '0x55d398326f99059ff775485246999027b3197955', // USDT token address
    outTokenAddress: '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d',// USDC token address
    amount: 1,   // without decimals
    gasPrice: 3  // without decimals
}
async function main() {
    try {
        const { data } = await axios.get(url, { params })
        if (data?.code === 200) console.log('quote success');

    } catch (error) {
        console.log(data);

    }
}
main();
Python Demo

Copy
import requests

chain = 'bsc'
url = f'https://open-api.openocean.finance/v4/{chain}/quote'
params = {
    'inTokenAddress': '0x55d398326f99059ff775485246999027b3197955',
    'outTokenAddress': '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d',
    'amount': 1,
    'gasPrice': 3
}

def main():
    response = requests.get(url, params=params)
    
    if response.status_code == 200:
        data = response.json()
        print(data)
    else:
        print("Error occurred:", response.text)

if __name__ == "__main__":
    main()
Go Demo
Copy
package main

import (
	"fmt"
	"net/http"
	"encoding/json"
)

func main() {
	chain := "bsc"
	url := fmt.Sprintf("https://open-api.openocean.finance/v4/%s/quote", chain)
	params := map[string]string{
		"inTokenAddress":  "0x55d398326f99059ff775485246999027b3197955",
		"outTokenAddress": "0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d",
		"amount":          "1",
		"gasPrice":        "3",
	}

	resp, err := http.Get(url)
	if err != nil {
		fmt.Println("quote fail")
		return
	}
	defer resp.Body.Close()

	var data map[string]interface{}
	json.NewDecoder(resp.Body).Decode(&data)

	code, ok := data["code"].(float64)
	if !ok {
		fmt.Println("quote fail")
		return
	}

	if code == 200 {
		fmt.Println("quote success")
	} else {
		fmt.Println("quote fail")
	}
}
JAVA Demo
Copy
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

public class Main {
    public static void main(String[] args) {
        String chain = "bsc";
        String url = "https://open-api.openocean.finance/v4/" + chain + "/quote";
        
        Map<String, Object> params = new HashMap<>();
        params.put("inTokenAddress", "0x55d398326f99059ff775485246999027b3197955");
        params.put("outTokenAddress", "0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d");
        params.put("amount", 1);
        params.put("gasPrice", 3);
        
        try {
            URL apiUrl = new URL(url);
            HttpURLConnection connection = (HttpURLConnection) apiUrl.openConnection();
            connection.setRequestMethod("GET");
            
            ObjectMapper mapper = new ObjectMapper();
            JsonNode data = mapper.readTree(connection.getInputStream());
            
            if (data.has("code") && data.get("code").asInt() == 200) {
                System.out.println("quote success");
            } else {
                System.out.println("quote fail");
            }
        } catch (IOException e) {
            System.out.println("quote fail");
        }
    }
}
Swap_Quote
URL: https://open-api.openocean.finance/v4/:chain/swap

Method: get

Params:

parameter
type
example
description
chain

string

bsc or 56

Chain name or Chain ID          (support chain)

inTokenAddress

string

0x783C08b5F26E3daf8C4681F3bf49844e425b6393

token address

outTokenAddress

string

0xD81D45E7635400dDD9c028839e9a9eF479006B28

out token address

amount

string

5

Please set token amount without decimals.

e.g. 
1.00 ETH set as 1

1.23 USDC set as 1.23

gasPrice

string

5

Please set the gas price in GWEI without decimals

e.g. 14 GWEI set as 14

slippage

string

1

Define the acceptable slippage level by inputting a percentage value within the range of 0.05 to 50.

e.g. 1% slippage set as 1

default value 1

account

string

0xaPbs...D9sh

user's wallet address.
*If this param is not included in the request url, the response will only return quotes, without the calldata/transaction body.

referrer

string (Optional）

0xD4eb...37BB

The wallet address used to be mark as partners and receive an extra referrerFee from user.

referrerFee

number (Optional）

1

Specify the percentage of in-token you wish to receive from the transaction, within the range of 0% to 3%, with 1% represented as '1', in the range of 0.01 to 3.

e.g. 1.2% fee set as 1.2

By default, OpenOcean shares 20% of the fee. Please contact us if you wish to modify this rate.

enabledDexIds

string (Optional）

1

Enter the 'index' number of dexs through dexList endpoint to enable the dexs to access.

Note: enableDexIds has higher priority compare with disabledDexIds

Example:

request:

Copy
https://open-api.openocean.finance/v4/bsc/swap?inTokenAddress=0x55d398326f99059ff775485246999027b3197955&outTokenAddress=0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d&amount=5&gasPrice=1&slippage=1&account=0x2FF855378Cd29f120CDF9d675E959cb5422ec5f2&referrer=0xD4eb4cbB1ECbf96a1F0C67D958Ff6fBbB7B037BB
response:

Copy
{
    "code": 200,
    "data": {
        "inToken": {
            "address": "0x55d398326f99059ff775485246999027b3197955",
            "decimals": 18,
            "symbol": "USDT",
            "name": "Tether USD",
            "usd": "0.998546",
            "volume": 4.99273
        },
        "outToken": {
            "address": "0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d",
            "decimals": 18,
            "symbol": "USDC",
            "name": "USD Coin",
            "usd": "0.999955",
            "volume": 4.993697212299812
        },
        "inAmount": "5000000000000000000",
        "outAmount": "4993921938787056372",
        "estimatedGas": 516812,
        "minOutAmount": "4943982719399185808",
        "from": "0x2FF855378Cd29f120CDF9d675E959cb5422ec5f2",
        "to": "0x6352a56caadC4F1E25CD6c75970Fa768A3304e64",
        "value": "0",
        "gasPrice": "1000000000",
        "data": "0x90411a32...",
        "chainId": 56,
        "rfqDeadline": 0,
        "gmxFee": 0,
        "price_impact": "0.01%"
    }
}
The'estimatedGas'in the returned response is only a reference. When sending transactions on-chain, use eth_estimateGas * 1.25 -1.5 as needed. If the ‘estmateGas’ fails, we don't recommend submitting the tx on-chain. 

We also recommend updating the 'gasprice' parameter to avoid future failures due to the fluctuations of the on-chain gas price.

Get TokenList
URL: https://open-api.openocean.finance/v4/:chain/tokenList

Method: get

Params:

parameter
type
example
description
chain

string

bsc or 56

Chain name or Chain ID    (support chain)

Example:

Request: 

Copy
https://open-api.openocean.finance/v4/bsc/tokenList
Response:

Copy
{
"code": 200,
"data": [ {       
    "id":2737,
    "code":"minu",
    "name":"Minu",
    "address":"0xf48f91df403976060cc05dbbf8a0901b09fdefd4",
    "decimals":18,"symbol":"Minu",
    "icon":"https://s3.openocean.finance/token_logos/logos/1708980043911_24176891326005867.jpg",
    "chain":"bsc","createtime":"2024-02-26T20:40:57.000Z",
    "hot":null,"sort":"2024-02-26T20:40:57.000Z",
    "chainId":null,
    "customSymbol":null,
    "customAddress":null,
    "usd":"6.38459e-7"}
    ...
    ]
}
Get Dexes List
URL: https://open-api.openocean.finance/v4/:chain/dexList

Method: get

Params:

Parameter
type
example
description
chain

string

bsc or 56

chain name or chain ID    (support chain)

Example:

Request: 

Copy
https://open-api.openocean.finance/v3/avax/dexList
Response:

Copy
{
"code": 200,
"data": [
    {
        "index": 1,
        "code": "SushiSwap",
        "name": "SushiSwap"
    },
    {
        "index": 2,
        "code": "Pangolin",
        "name": "Pangolin"
    },
    ...
]  // Response
}
Get GasPrice
URL: https://open-api.openocean.finance/v4/:chain/gasPrice

Method: get

Params:

parameter
type
example
description
chain

string

bsc or 56

chain name or chain ID    (support chain)

Example:

Request: 

Copy
https://open-api.openocean.finance/v4/bsc/gasPrice
Response:

Copy
{
 "code": 200,
 "data": {
  "standard": 1000000000,
  "fast": 1000000000,
  "instant": 1000000000
 },
 "without_decimals": {
  "standard": "1",
  "fast": "1",
  "instant": "1"
 }
}
Please be aware that when using/quote and/swapin our API, the gasPrice should set in GWEI without decimals.

e.g. 14 GWEI set as 14

Get Transaction
URL: https://open-api.openocean.finance/v4/:chain/getTransaction

Method: get

Params:

parameter
type
example
description
chain

string

bsc or 56

Chain name or Chain ID          (support chain)

hash

string

hash from chain

Example:

Request: 

Copy
https://open-api.openocean.finance/v4/bsc/getTransaction?hash=0x756b98a89714be5c640ea9922aba12e0c94bc30e5a17e111d1aa40373cc24782
Response:

Copy
{
  "code": 200,
  "data":  {
"id": 1194505,
"tx_id": null,
"block_number": 37495567,
"tx_index": 153,
"address": "0x6352a56caadC4F1E25CD6c75970Fa768A3304e64",
"tx_hash": "0x756b98a89714be5c640ea9922aba12e0c94bc30e5a17e111d1aa40373cc24782",
"tx_hash_url": "https://bscscan.com/tx/0x756b98a89714be5c640ea9922aba12e0c94bc30e5a17e111d1aa40373cc24782",
"sender": "0xB3cbefF0336BaA4863Cb51238bD6C35BDAaB3D84",
"receiver": "0xB3cbefF0336BaA4863Cb51238bD6C35BDAaB3D84",
"in_token_address": "0x8ea5219a16c2dbF1d6335A6aa0c6bd45c50347C5",
"in_token_symbol": "OOE",
"out_token_address": "0x55d398326f99059fF775485246999027B3197955",
"out_token_symbol": "USDT",
"referrer": "0x3487Ef9f9B36547e43268B8f0E2349a226c70b53",
"in_amount": "276240675000000000000",
"out_amount": "5913781972337104042",
"fee": "",
"referrer_fee": "",
"usd_valuation": 5.89409756,
"create_at": "2024-04-02T02:23:04.000Z",
"update_at": "2024-04-02T02:23:04.000Z",
"tx_fee": "0.000238858",
"tx_fee_valuation": "0.13744845",
"in_token_decimals": 18,
"out_token_decimals": 18,
"in_amount_value": "276.240675",
"out_amount_value": "5.913781972337104042",
"tx_profit": "0",
"tx_profit_valuation": "0"
  }
}
DecodeInputData
URL: https://open-api.openocean.finance/v4/:chain/decodeInputData

Method: get

Params:

parameter
type
example
description
chain

string

bsc or 56

Chain name or Chain ID          (support chain)

data

string

inputData

method

string

swap

function name

Example:

Request: 

Copy
https://open-api.openocean.finance/v4/bsc/decodeInputData?data={000000xxxxxx}&method=swap
response:

Copy
  {
  "caller": "0x55877bD7F2EE37BDe55cA4B271A3631f3A7ef121",
  "desc": {
"srcToken": "0x8ea5219a16c2dbF1d6335A6aa0c6bd45c50347C5",
"dstToken": "0x55d398326f99059fF775485246999027B3197955",
"srcReceiver": "0xcE07D794FD313a1792E9bdef9912a949DfE99D75",
"dstReceiver": "0xB3cbefF0336BaA4863Cb51238bD6C35BDAaB3D84",
"amount": "276240675000000000000",
"minReturnAmount": "5854644152613733002",
"guaranteedAmount": "5913781972337104042",
"flags": "2",
"referrer": "0x3487Ef9f9B36547e43268B8f0E2349a226c70b53",
"permit": "0x"
  },
  "calls": [
{
  "target": "0",
  "gasLimit": "0",
  "value": "0",
  "data": "0xcac460ee00000000000000003b7c4580ce07d794fd313a1792e9bdef9912a949dfe99d750000000000000000000000008ea5219a16c2dbf1d6335a6aa0c6bd45c50347c50000000000000000000000008e50d726e2ea87a27fa94760d4e65d58c3ad8b44"
},
{
  "target": "0",
  "gasLimit": "0",
  "value": "0",
  "data": "0xcac460ee80000000000000003b8b87c08e50d726e2ea87a27fa94760d4e65d58c3ad8b44000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d5600000000000000000000000055877bd7f2ee37bde55ca4b271a3631f3a7ef121"
},
{
  "target": "0",
  "gasLimit": "0",
  "value": "0",
  "data": "0x8a6a1e8500000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000353c1f0bc78fbbc245b3c93ef77b1dcc5b77d2a00000000000000000000000000000000000000000000000005211f95f0c4314aa"
},
{
  "target": "0",
  "gasLimit": "0",
  "value": "0",
  "data": "0x9f86542200000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000000000001000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000064d1660f9900000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000b3cbeff0336baa4863cb51238bd6c35bdaab3d84000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
}
  ]
}





Meme API
Build, Trade, Innovate

Unlock the power of the fastest API for Moonshot, Pump.fun, and dexs of Raydium and Meteora. Seamlessly buy, sell, and access real-time price data for any token using the Solana Gateway. Designed for developers, it’s the ultimate API for building personalized or public tools in the memecoin space.

Comprehensive API Solutions Our API integrates with Pump.fun and Moonshot to deliver precise and reliable price data. With the Solana Gateway, developers can easily create innovative tools, enabling limitless possibilities for trading and analysis.

Want to see how the API works? Check out the live product - BullMe powered by our API.



New Tokens Filter
Path: /market/token/newTokens

Method: GET

Params:

Parameter

Type

Example

Description

marketCapMin

number

1000

The minimum value of the marketCap

marketCapMax

number

2000

The maximum value of the marketCap

tradeVolume24hMin

number

1000

The minimum value of the 24h trade volume

tradeVolume24hMax

number

2000

The maximum value of the 24h trade volume

bondingCurveProgressMin

number

50

The minimum value of the bonding curve progress

bondingCurveProgressMax

number

98

The maximum value of the bonding curve progress

tradeCount24hMin

number

200

The minimum value of the 24h trade count

tradeCount24hMax

number

500

The maximum value of the 24h trade count

buyCount24hMin

number

100

The minimum value of the 24h buy count

buyCount24hMax

number

200

The maximum value of the 24h buy count

sellCount24hMin

number

100

The minimum value of the 24h sell count

sellCount24hMax

number

200

The maximum value of the 24h sell count

liquidityMin

number

20

The minimum value of the liquidity

liquidityMax

number

30

The maximum value of the liquidity

Example

request

https://meme-api.openocean.finance/market/token/newTokens

response

Copy
{
    "code": 0,
    "msg": "success",
    "ts": 1732760720635,
    "data": [
        {
            "address": "8qsPqXUsj83aMBfwr8MeLHd19be6mryTJCUFKgGSpump",
            "symbol": "CHARON",
            "name": "CHARON AI",
            "totalSupply": 1000000000,
            "decimals": 6,
            "logo": "https://ipfs.io/ipfs/QmafVycDyUF6v8NZssGBALd2HUgTghPVH6ZttbeEEKXoR5",
            "creator": "GDnsYHFzxxN93RBoSFPK4RsMWug74339Ns6uLBqFAKkx",
            "description": "Charon AI: A revolutionary quantum-powered artificial intelligence system designed for advanced neural processing and deep learning optimization. Experience unprecedented computational capabilities with our cutting-edge cybernetic architecture and neural network integration.",
            "showName": true,
            "twitter": "https://x.com/CharonAIpf",
            "telegram": "https://t.me/CharonAIpf",
            "website": "https://charonai.space/",
            "blockNumber": 304046304,
            "hash": "4fHYShfFrhoWfcMKwEKhnXDy72xEAVfSv4z2bRhZzmzokd5Y269iqRkpEFVV4Y7dDr2B4iqQXSByjT5jDVrXsxzM",
            "source": "pump",
            "dex": null,
            "timestamp": 1732760686000,
            "migrateTime": null,
            "completeTime": null,
            "marketCap": 8885.9233203,
            "tradeVolume": 2625.2889068185,
            "tradeCount": 10,
            "top10Holder": 0.146726,
            "bondingCurveProgress": 18.500343,
            "status": "NEW",
            "tradeVolume24h": 2625.2889068185,
            "buyVolume24h": 1892.0733719389,
            "sellVolume24h": 733.2155348796,
            "tradeCount24h": 10,
            "buyCount24h": 9,
            "sellCount24h": 1,
            "liquidity": 4.752144005
        }
    ],
    "error": false
}
2. Token List
Path: /market/token/tokens

Method: GET

Params:

Parameter

Type

Example

Description

Type

number

1

1: NEW 2: Graduating soon 3: Graduated

Example

request

https://meme-api.openocean.finance/market/token/tokens?Type=2

response

Copy
{
    "code": 0,
    "msg": "success",
    "ts": 1732763589560,
    "data": [
        {
            "address": "BSRjBP7GXKkJgwn6TDH8tQW1qdfUNCmm8MDiRiPDpump",
            "symbol": "Bitchcoin",
            "name": "Bitchcoin",
            "totalSupply": 1000000000,
            "decimals": 6,
            "logo": "https://ipfs.io/ipfs/Qmc13ZRQeay5Ca1h9ncyStugRSkdtZpr36BsZH7isdBDmG",
            "creator": "EpG5WSoBj2kwfbUDYUgaYaztCHykuk7owpivyjp3FDGp",
            "description": "",
            "showName": true,
            "twitter": "https://x.com/bryanbrinkman/status/1861970322007711859",
            "telegram": "",
            "website": "https://en.m.wikipedia.org/wiki/Bitchcoin",
            "blockNumber": 304052583,
            "hash": "YTKfAucvY1V8fVJQFEJgdSkVcQ1apc5QKX4Vw3rev5DduraRtB8eUsREqbGeZrcpEjKN9jir3WTtdJuKNFGqF3s",
            "source": "pump",
            "dex": null,
            "timestamp": 1732763404000,
            "migrateTime": null,
            "completeTime": 1732763430000,
            "marketCap": 95817.623783653,
            "tradeVolume": 44544.443383254,
            "tradeCount": 130,
            "top10Holder": 0.372159,
            "bondingCurveProgress": 100,
            "status": "COMPLETE",
            "tradeVolume24h": 44544.443383254,
            "buyVolume24h": 32570.620949015,
            "sellVolume24h": 11973.822434239,
            "tradeCount24h": 130,
            "buyCount24h": 118,
            "sellCount24h": 12,
            "liquidity": 80.686557556
        }
    ],
    "error": false
}
3. Token Detail
Path /market/token/detail

Method: GET

Params:

Parameter

Type

Example

Description

address

string

BSRjBP7GXKkJgwn6TDH8tQW1qdfUNCmm8MDiRiPDpump

token address

Example:

request

https://meme-api.openocean.finance/market/token/detail?address=BSRjBP7GXKkJgwn6TDH8tQW1qdfUNCmm8MDiRiPDpump

response

Copy
{
    "code": 0,
    "msg": "success",
    "ts": 1732763941361,
    "data": {
        "address": "BSRjBP7GXKkJgwn6TDH8tQW1qdfUNCmm8MDiRiPDpump",
        "bondingCurve": "Dd5b2cFyvzn72jZw86zUdReTYBTEH1GTUDSg5zF26cyH",
        "associatedBondingCurve": "ACWaqnZ7PuaMKqQqNN2syENqMJUCXFxJCiv4JXYJfWE4",
        "symbol": "Bitchcoin",
        "name": "Bitchcoin",
        "totalSupply": 1000000000,
        "decimals": 6,
        "logo": "https://ipfs.io/ipfs/Qmc13ZRQeay5Ca1h9ncyStugRSkdtZpr36BsZH7isdBDmG",
        "creator": "EpG5WSoBj2kwfbUDYUgaYaztCHykuk7owpivyjp3FDGp",
        "description": "",
        "showName": true,
        "twitter": "https://x.com/bryanbrinkman/status/1861970322007711859",
        "telegram": "",
        "website": "https://en.m.wikipedia.org/wiki/Bitchcoin",
        "blockNumber": 304052583,
        "hash": "YTKfAucvY1V8fVJQFEJgdSkVcQ1apc5QKX4Vw3rev5DduraRtB8eUsREqbGeZrcpEjKN9jir3WTtdJuKNFGqF3s",
        "source": "pump",
        "dex": "raydium",
        "timestamp": 1732763404000,
        "virtualTokenReserves": 279900000000000,
        "virtualSolReserves": 115005359120,
        "price": 0.000022630668593187,
        "priceSol": 0.000000093538350802,
        "solPrice": 241.94,
        "marketCap": 22630.668593187,
        "liquidity": 79.00535912,
        "tradeUserCount": 702,
        "priceChangePercent24h": 2.1849,
        "tradeVolume": 393581.69079468364,
        "tradeVolume24h": 393581.69079468364,
        "buyVolume24h": 202370.582791104,
        "sellVolume24h": 191211.1080035796,
        "bondingCurveProgress": 100,
        "tradeCount": 1632,
        "tradeCount24h": 1632,
        "buyCount24h": 911,
        "sellCount24h": 721,
        "top10Holder": 0.372159,
        "status": "MIGRATE",
        "realTokenReserves": "222550964191312",
        "realSolReserves": "7.900535912E+10"
    },
    "error": false
}
4. Token Transactions
Path: /market/token/trades

Method: GET

Params:

Parameter

Type

Example

Description

address

string

BSRjBP7GXKkJgwn6TDH8tQW1qdfUNCmm8MDiRiPDpump

token address

Example:

request

https://meme-api.openocean.finance/market/token/trades?address=BSRjBP7GXKkJgwn6TDH8tQW1qdfUNCmm8MDiRiPDpump

response

Copy
{
    "code": 0,
    "msg": "success",
    "ts": 1732764256968,
    "data": [
        {
            "hash": "24eG833zUThvrrPkKPsR2QcwrDGx8PR8desKHCaNwrNoy9YJW7HKfRqPMmbJ3HFB1deHzv5bNLV61Nu4rVcLJ5QG",
            "address": "BSRjBP7GXKkJgwn6TDH8tQW1qdfUNCmm8MDiRiPDpump",
            "account": "CKeqPxTEVJUbQbgExArCeYLiyWeuho2b3FR3WJNJVH8r",
            "side": "SELL",
            "amount": 1021564.970295,
            "volume": 12.548705615,
            "price": 0.000012283805709759,
            "tradeTime": 1732764241000,
            "source": "raydium"
        }
    ],
    "error": false
}
5. User Transactions
Path /trading/userTrades

Method: GET

Params:

Parameter

Type

Example

Description

address

string

Bw6JTAqXEredtatiCWBxfKreUKd2bqSJiLQX28yvpump

token address

account

string

uExXZEFGVoFMybEZkRxJhaMfN4gpkw8CZeQndDbvnPc

user account

Example:

request

https://meme-api.openocean.finance/trading/userTrades?address=Bw6JTAqXEredtatiCWBxfKreUKd2bqSJiLQX28yvpump&account=uExXZEFGVoFMybEZkRxJhaMfN4gpkw8CZeQndDbvnPc

response

Copy
{
    "code": 0,
    "msg": "success",
    "ts": 1732767241609,
    "data": [
        {
            "hash": "5xFJGTARKPv6UKBmULuj3Y9unxmwV3n3bX4RAxduk9LjTP3TMDrkhxfTdFznvPEEDPSAAEgAiQN26DDcSwWEHHUz",
            "account": "uExXZEFGVoFMybEZkRxJhaMfN4gpkw8CZeQndDbvnPc",
            "side": "BUY",
            "amount": 26322.327608000,
            "volume": 0.229785312,
            "price": 0.000008729672976570,
            "tradeTime": 1732710175000,
            "source": "pump"
        }
    ],
    "error": false
}
6. User Positions
Path /trading/userHolds

Method: GET

Params:

Parameter

Type

Example

Description

account

string

uExXZEFGVoFMybEZkRxJhaMfN4gpkw8CZeQndDbvnPc

user account

Example:

request

https://meme-api.openocean.finance/trading/userHolds?account=uExXZEFGVoFMybEZkRxJhaMfN4gpkw8CZeQndDbvnPc

response

Copy
{
    "code": 0,
    "msg": "success",
    "ts": 1732767664102,
    "data": [
        {
            "address": "Bw6JTAqXEredtatiCWBxfKreUKd2bqSJiLQX28yvpump",
            "symbol": "GSWIFT",
            "logo": "https://ipfs.io/ipfs/QmbH8pMDhNu3k31kyn1LYpggyLC9nM18jmiSquY1bAf2cF",
            "account": "uExXZEFGVoFMybEZkRxJhaMfN4gpkw8CZeQndDbvnPc",
            "holdAmount": 26322.327608000,
            "buyAmount": 26322.327608000,
            "buyVolume": 0.229785312,
            "buyCount": 1,
            "buyAvgPrice": 0.000008730,
            "sellAmount": 0.000000000,
            "sellVolume": 0.000000000,
            "sellCount": 0,
            "sellAvgPrice": 0.000000000,
            "price": 0.000007244401601991,
            "totalProfit": 0.000000000,
            "lastActiveTime": 1732710175000,
            "source": "pump"
        }
    ],
    "error": false
}
7. Kline
Path: /market/kline/list

Method: GET

Params:

Parameter

Type

Example

Descirption

account

string

DE73c4hvot9sWzshi42s3xnqzuMkLzu2PmLyQWJGpump

token address

period

string

1m

1m/15m/1h/1d

startTime

number

1732757400000

start time

endTime

number

1732768200000

end time

Example:

request

https://meme-api.openocean.finance/market/kline/list?address=DE73c4hvot9sWzshi42s3xnqzuMkLzu2PmLyQWJGpump&period=1m&startTime=1732757400000&endTime=1732768200000

response

Copy
{
    "code": 0,
    "msg": "success",
    "ts": 1732768205773,
    "data": [
        {
            "beginTime": 1732768140,
            "endTime": 1732768200,
            "openPrice": 0.000306560618,
            "highPrice": 0.000357840085,
            "lowPrice": 0.000253239743,
            "closePrice": 0.000262784526,
            "volume": 117293512.479,
            "quoteVolume": 35029.723807769,
            "count": 151
        }
    ],
    "error": false
}


New Tokens Filter
Path: /market/token/newTokens

Method: GET

Params:

Parameter

Type

Example

Description

marketCapMin

number

1000

The minimum value of the marketCap

marketCapMax

number

2000

The maximum value of the marketCap

tradeVolume24hMin

number

1000

The minimum value of the 24h trade volume

tradeVolume24hMax

number

2000

The maximum value of the 24h trade volume

bondingCurveProgressMin

number

50

The minimum value of the bonding curve progress

bondingCurveProgressMax

number

98

The maximum value of the bonding curve progress

tradeCount24hMin

number

200

The minimum value of the 24h trade count

tradeCount24hMax

number

500

The maximum value of the 24h trade count

buyCount24hMin

number

100

The minimum value of the 24h buy count

buyCount24hMax

number

200

The maximum value of the 24h buy count

sellCount24hMin

number

100

The minimum value of the 24h sell count

sellCount24hMax

number

200

The maximum value of the 24h sell count

liquidityMin

number

20

The minimum value of the liquidity

liquidityMax

number

30

The maximum value of the liquidity

Example

request

https://meme-api.openocean.finance/market/token/newTokens

response

Copy
{
    "code": 0,
    "msg": "success",
    "ts": 1732760720635,
    "data": [
        {
            "address": "8qsPqXUsj83aMBfwr8MeLHd19be6mryTJCUFKgGSpump",
            "symbol": "CHARON",
            "name": "CHARON AI",
            "totalSupply": 1000000000,
            "decimals": 6,
            "logo": "https://ipfs.io/ipfs/QmafVycDyUF6v8NZssGBALd2HUgTghPVH6ZttbeEEKXoR5",
            "creator": "GDnsYHFzxxN93RBoSFPK4RsMWug74339Ns6uLBqFAKkx",
            "description": "Charon AI: A revolutionary quantum-powered artificial intelligence system designed for advanced neural processing and deep learning optimization. Experience unprecedented computational capabilities with our cutting-edge cybernetic architecture and neural network integration.",
            "showName": true,
            "twitter": "https://x.com/CharonAIpf",
            "telegram": "https://t.me/CharonAIpf",
            "website": "https://charonai.space/",
            "blockNumber": 304046304,
            "hash": "4fHYShfFrhoWfcMKwEKhnXDy72xEAVfSv4z2bRhZzmzokd5Y269iqRkpEFVV4Y7dDr2B4iqQXSByjT5jDVrXsxzM",
            "source": "pump",
            "dex": null,
            "timestamp": 1732760686000,
            "migrateTime": null,
            "completeTime": null,
            "marketCap": 8885.9233203,
            "tradeVolume": 2625.2889068185,
            "tradeCount": 10,
            "top10Holder": 0.146726,
            "bondingCurveProgress": 18.500343,
            "status": "NEW",
            "tradeVolume24h": 2625.2889068185,
            "buyVolume24h": 1892.0733719389,
            "sellVolume24h": 733.2155348796,
            "tradeCount24h": 10,
            "buyCount24h": 9,
            "sellCount24h": 1,
            "liquidity": 4.752144005
        }
    ],
    "error": false
}
2. Token List
Path: /market/token/tokens

Method: GET

Params:

Parameter

Type

Example

Description

Type

number

1

1: NEW 2: Graduating soon 3: Graduated

Example

request

https://meme-api.openocean.finance/market/token/tokens?Type=2

response

Copy
{
    "code": 0,
    "msg": "success",
    "ts": 1732763589560,
    "data": [
        {
            "address": "BSRjBP7GXKkJgwn6TDH8tQW1qdfUNCmm8MDiRiPDpump",
            "symbol": "Bitchcoin",
            "name": "Bitchcoin",
            "totalSupply": 1000000000,
            "decimals": 6,
            "logo": "https://ipfs.io/ipfs/Qmc13ZRQeay5Ca1h9ncyStugRSkdtZpr36BsZH7isdBDmG",
            "creator": "EpG5WSoBj2kwfbUDYUgaYaztCHykuk7owpivyjp3FDGp",
            "description": "",
            "showName": true,
            "twitter": "https://x.com/bryanbrinkman/status/1861970322007711859",
            "telegram": "",
            "website": "https://en.m.wikipedia.org/wiki/Bitchcoin",
            "blockNumber": 304052583,
            "hash": "YTKfAucvY1V8fVJQFEJgdSkVcQ1apc5QKX4Vw3rev5DduraRtB8eUsREqbGeZrcpEjKN9jir3WTtdJuKNFGqF3s",
            "source": "pump",
            "dex": null,
            "timestamp": 1732763404000,
            "migrateTime": null,
            "completeTime": 1732763430000,
            "marketCap": 95817.623783653,
            "tradeVolume": 44544.443383254,
            "tradeCount": 130,
            "top10Holder": 0.372159,
            "bondingCurveProgress": 100,
            "status": "COMPLETE",
            "tradeVolume24h": 44544.443383254,
            "buyVolume24h": 32570.620949015,
            "sellVolume24h": 11973.822434239,
            "tradeCount24h": 130,
            "buyCount24h": 118,
            "sellCount24h": 12,
            "liquidity": 80.686557556
        }
    ],
    "error": false
}
3. Token Detail
Path /market/token/detail

Method: GET

Params:

Parameter

Type

Example

Description

address

string

BSRjBP7GXKkJgwn6TDH8tQW1qdfUNCmm8MDiRiPDpump

token address

Example:

request

https://meme-api.openocean.finance/market/token/detail?address=BSRjBP7GXKkJgwn6TDH8tQW1qdfUNCmm8MDiRiPDpump

response

Copy
{
    "code": 0,
    "msg": "success",
    "ts": 1732763941361,
    "data": {
        "address": "BSRjBP7GXKkJgwn6TDH8tQW1qdfUNCmm8MDiRiPDpump",
        "bondingCurve": "Dd5b2cFyvzn72jZw86zUdReTYBTEH1GTUDSg5zF26cyH",
        "associatedBondingCurve": "ACWaqnZ7PuaMKqQqNN2syENqMJUCXFxJCiv4JXYJfWE4",
        "symbol": "Bitchcoin",
        "name": "Bitchcoin",
        "totalSupply": 1000000000,
        "decimals": 6,
        "logo": "https://ipfs.io/ipfs/Qmc13ZRQeay5Ca1h9ncyStugRSkdtZpr36BsZH7isdBDmG",
        "creator": "EpG5WSoBj2kwfbUDYUgaYaztCHykuk7owpivyjp3FDGp",
        "description": "",
        "showName": true,
        "twitter": "https://x.com/bryanbrinkman/status/1861970322007711859",
        "telegram": "",
        "website": "https://en.m.wikipedia.org/wiki/Bitchcoin",
        "blockNumber": 304052583,
        "hash": "YTKfAucvY1V8fVJQFEJgdSkVcQ1apc5QKX4Vw3rev5DduraRtB8eUsREqbGeZrcpEjKN9jir3WTtdJuKNFGqF3s",
        "source": "pump",
        "dex": "raydium",
        "timestamp": 1732763404000,
        "virtualTokenReserves": 279900000000000,
        "virtualSolReserves": 115005359120,
        "price": 0.000022630668593187,
        "priceSol": 0.000000093538350802,
        "solPrice": 241.94,
        "marketCap": 22630.668593187,
        "liquidity": 79.00535912,
        "tradeUserCount": 702,
        "priceChangePercent24h": 2.1849,
        "tradeVolume": 393581.69079468364,
        "tradeVolume24h": 393581.69079468364,
        "buyVolume24h": 202370.582791104,
        "sellVolume24h": 191211.1080035796,
        "bondingCurveProgress": 100,
        "tradeCount": 1632,
        "tradeCount24h": 1632,
        "buyCount24h": 911,
        "sellCount24h": 721,
        "top10Holder": 0.372159,
        "status": "MIGRATE",
        "realTokenReserves": "222550964191312",
        "realSolReserves": "7.900535912E+10"
    },
    "error": false
}
4. Token Transactions
Path: /market/token/trades

Method: GET

Params:

Parameter

Type

Example

Description

address

string

BSRjBP7GXKkJgwn6TDH8tQW1qdfUNCmm8MDiRiPDpump

token address

Example:

request

https://meme-api.openocean.finance/market/token/trades?address=BSRjBP7GXKkJgwn6TDH8tQW1qdfUNCmm8MDiRiPDpump

response

Copy
{
    "code": 0,
    "msg": "success",
    "ts": 1732764256968,
    "data": [
        {
            "hash": "24eG833zUThvrrPkKPsR2QcwrDGx8PR8desKHCaNwrNoy9YJW7HKfRqPMmbJ3HFB1deHzv5bNLV61Nu4rVcLJ5QG",
            "address": "BSRjBP7GXKkJgwn6TDH8tQW1qdfUNCmm8MDiRiPDpump",
            "account": "CKeqPxTEVJUbQbgExArCeYLiyWeuho2b3FR3WJNJVH8r",
            "side": "SELL",
            "amount": 1021564.970295,
            "volume": 12.548705615,
            "price": 0.000012283805709759,
            "tradeTime": 1732764241000,
            "source": "raydium"
        }
    ],
    "error": false
}
5. User Transactions
Path /trading/userTrades

Method: GET

Params:

Parameter

Type

Example

Description

address

string

Bw6JTAqXEredtatiCWBxfKreUKd2bqSJiLQX28yvpump

token address

account

string

uExXZEFGVoFMybEZkRxJhaMfN4gpkw8CZeQndDbvnPc

user account

Example:

request

https://meme-api.openocean.finance/trading/userTrades?address=Bw6JTAqXEredtatiCWBxfKreUKd2bqSJiLQX28yvpump&account=uExXZEFGVoFMybEZkRxJhaMfN4gpkw8CZeQndDbvnPc

response

Copy
{
    "code": 0,
    "msg": "success",
    "ts": 1732767241609,
    "data": [
        {
            "hash": "5xFJGTARKPv6UKBmULuj3Y9unxmwV3n3bX4RAxduk9LjTP3TMDrkhxfTdFznvPEEDPSAAEgAiQN26DDcSwWEHHUz",
            "account": "uExXZEFGVoFMybEZkRxJhaMfN4gpkw8CZeQndDbvnPc",
            "side": "BUY",
            "amount": 26322.327608000,
            "volume": 0.229785312,
            "price": 0.000008729672976570,
            "tradeTime": 1732710175000,
            "source": "pump"
        }
    ],
    "error": false
}
6. User Positions
Path /trading/userHolds

Method: GET

Params:

Parameter

Type

Example

Description

account

string

uExXZEFGVoFMybEZkRxJhaMfN4gpkw8CZeQndDbvnPc

user account

Example:

request

https://meme-api.openocean.finance/trading/userHolds?account=uExXZEFGVoFMybEZkRxJhaMfN4gpkw8CZeQndDbvnPc

response

Copy
{
    "code": 0,
    "msg": "success",
    "ts": 1732767664102,
    "data": [
        {
            "address": "Bw6JTAqXEredtatiCWBxfKreUKd2bqSJiLQX28yvpump",
            "symbol": "GSWIFT",
            "logo": "https://ipfs.io/ipfs/QmbH8pMDhNu3k31kyn1LYpggyLC9nM18jmiSquY1bAf2cF",
            "account": "uExXZEFGVoFMybEZkRxJhaMfN4gpkw8CZeQndDbvnPc",
            "holdAmount": 26322.327608000,
            "buyAmount": 26322.327608000,
            "buyVolume": 0.229785312,
            "buyCount": 1,
            "buyAvgPrice": 0.000008730,
            "sellAmount": 0.000000000,
            "sellVolume": 0.000000000,
            "sellCount": 0,
            "sellAvgPrice": 0.000000000,
            "price": 0.000007244401601991,
            "totalProfit": 0.000000000,
            "lastActiveTime": 1732710175000,
            "source": "pump"
        }
    ],
    "error": false
}
7. Kline
Path: /market/kline/list

Method: GET

Params:

Parameter

Type

Example

Descirption

account

string

DE73c4hvot9sWzshi42s3xnqzuMkLzu2PmLyQWJGpump

token address

period

string

1m

1m/15m/1h/1d

startTime

number

1732757400000

start time

endTime

number

1732768200000

end time

Example:

request

https://meme-api.openocean.finance/market/kline/list?address=DE73c4hvot9sWzshi42s3xnqzuMkLzu2PmLyQWJGpump&period=1m&startTime=1732757400000&endTime=1732768200000

response

Copy
{
    "code": 0,
    "msg": "success",
    "ts": 1732768205773,
    "data": [
        {
            "beginTime": 1732768140,
            "endTime": 1732768200,
            "openPrice": 0.000306560618,
            "highPrice": 0.000357840085,
            "lowPrice": 0.000253239743,
            "closePrice": 0.000262784526,
            "volume": 117293512.479,
            "quoteVolume": 35029.723807769,
            "count": 151
        }
    ],
    "error": false
}


openapi
 4.0 
OAS 3.0
The open API description

Swap


GET
/v4/{chain}/quote


GET
/v4/{chain}/swap


GET
/v4/{chain}/tokenList


GET
/v4/{chain}/gasPrice


GET
/v4/{chain}/getTransaction


GET
/v4/{chain}/decodeInputData


GET
/v4/{chain}/getTokenInfo


GET
/v4/{chain}/allowance


GET
/v4/{chain}/getBalance


GET
/v4/{chain}/dexList


GET
/v4/{chain}/reverseQuote


GET
/v4/{chain}/bullme/swap

Cross


GET
/cross_chain/v1/cross/quote


POST
/cross_chain/v1/cross/swap


GET
/cross_chain/v1/cross/getCrossTransaction


GET
/cross_chain/v1/cross/getCrossStatus


GET
/cross_chain/v1/cross/getMinSend

Limit order


GET
/v1/limit-order/{chain}/address/{address}


GET
/v1/limit-order/{chain}/all

GMX


GET
/v3/{chain}/gmx_quote


GET
/v3/{chain}/gmx_swap_quote


GET
/v3/{chain}/gmx_transaction

DCA


POST
/v1/{chain}/dca/swap


POST
/v1/{chain}/dca/cancel


GET
/v1/{chain}/dca/address/{address}


GET
/v1/{chain}/dca/all


Schemas
DcaSwapDto{
route*	{
description:	
route from quote interface

}
example: OrderedMap { "makerAmount": "20000000", "takerAmount": "19983700", "signature": "0x37e6...", "orderHash": "0x8e89...", "orderMaker": "0xB3cb...", "remainingMakerAmount": "20000000", "data": OrderedMap { "salt": "", "makerAsset": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913", "takerAsset": "0xd9aAEc86B65D86f6A7B5B1b0c42FFA531710b6CA", "maker": "0xB3cb...", "receiver": "0x0000000000000000000000000000000000000000", "allowedSender": "0x0000000000000000000000000000000000000000", "makingAmount": "20000000", "takingAmount": "19983700", "makerAssetData": "0x", "takerAssetData": "0x", "getMakerAmount": "0x", "getTakerAmount": "0x", "predicate": "0x", "permit": "0x", "interaction": "0x" }, "isActive": true, "chainId": 8453, "expireTime": 600, "amountRate": "1.000816", "interaction": "0x", "time": 300, "times": 2, "minPrice": "0.9", "maxPrice": "1.1" }
}
HashDto{
hash*	string
hash from chain, such as: 0x4e32ab6e0e9ff2db6157a14b0d4bac018f1633e14b3cccbd56541f24f191a5b4

}




Developer
ℹ️
Developer Resources
🔗
Supported Chains
The evm & non-evm blockchains supported on OpenOcean

EVM Chains:

EVM Chains
Chain Code
Chain ID
Native Token Address
Ethereum

eth

1

0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

BNB Chain

bsc

56

0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

zkSync Era

zksync

324

0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

Polygon

polygon

137

0x0000000000000000000000000000000000001010

Base

base

8453

0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

Linea

linea

59144

0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

Fantom

fantom

250

0x0000000000000000000000000000000000000000

Avalanche C-Chain

avax

43114

0x0000000000000000000000000000000000000000

Arbitrum One

arbitrum

42161

0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

Optimism

optimism

10

0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

Moonriver

moonriver

1285

0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

Aurora

aurora

1313161554

0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

Cronos

cronos

25

0x0000000000000000000000000000000000000000

Harmony

harmony

1666600000

0x0000000000000000000000000000000000000000

Kava

kava

2222

0x0000000000000000000000000000000000000000

Metis Andromeda

metis

1088

0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000

Celo

celo

42220

0x471EcE3750Da237f93B8E339c536989b8978a438

Telos

telos

40

0x0000000000000000000000000000000000000000

Polygon zkEVM

polygon_zkevm

1101

0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

Gnosis

xdai

100

0x0000000000000000000000000000000000000000

opBNB

opbnb

204

0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

Mantle

mantle

5000

0x0000000000000000000000000000000000000000

Manta

manta

169

0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

Scroll

scroll

534352

0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

Blast

blast

81457

0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

Mode

mode

34443

0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

Rootstock

rootstock

30

0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

Sei

sei

1329

0x0000000000000000000000000000000000000000

Gravity

gravity

1625

0x0000000000000000000000000000000000000000

Apechain

ape

33139

0x0000000000000000000000000000000000000000

Sonic

soinc

146

0x0000000000000000000000000000000000000000

Berachain

bera

80094

0x0000000000000000000000000000000000000000

Monad Testnet

monad 

10143

0x0000000000000000000000000000000000000000

UniChain

unichain

130

0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

Flare 

flare

14

0x0000000000000000000000000000000000000000

Non-EVM Chain



Developer
ℹ️
Developer Resources
📋
Contracts of Chains
OpenOcean’s current contract addresses across our supported chains

OpenOcean’s current contract addresses: 
EVM Chains:

Ethereum: 0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

BNB Chain: 0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Polygon: 0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Avalanche: 0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Fantom: 0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Arbitrum: 0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Optimism: 0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

zkSync Era: 0x36A1aCbbCAfca2468b85011DDD16E7Cb4d673230

Base: 0x6352a56caadc4f1e25cd6c75970fa768a3304e64

opBNB:0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Linea: 0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Mantle:0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Manta: 0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Telos: 0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Scroll:0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Gnosis: 0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Cronos: 0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Harmony:0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Blast:0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Mode:0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Rootstock(RSK):0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Sei:0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Gravity: 0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Kava: 0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Metis: 0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Celo: 0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Polygon zkEVM: 0x6dd434082EAB5Cd134B33719ec1FF05fE985B97b

Aurora: 0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

APE :0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Sonic:0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Berachain:0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Monad Testnet: 0x6352a56caadc4f1e25cd6c75970fa768a3304e64

UniChain:0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Flare:0x6352a56caadC4F1E25CD6c75970Fa768A3304e64

Non-EVM Chain:

Ontology: 351134766ae933edd509e968166f1f3471f95f4b

Sui:0x50e9e91fa4e5524fd0dafc6aa4a4fb1c3494c326384a278fdd282faffe5f4492

Aptos: 0x2514f69adae8f34d3d86a4c390edb40ecf26e7f7693f033849b4339dd34db033


🚩
Common Error Code
Error Code
Solution
400 - Bad Request

Please double check the parameters in the request

401, 402 - Unauthorized

Please use the correct API Key (Only for Pro User)

403 - Forbidden

Please contact us to whitelist your IP, seems you have broken some of the security strategies

404 - Not Found

Please double check whether the request URL exist.

429 - Too Many Requests

Please lower your request rate

500 - Internal Server Error

Please double check your request and contact us

502 - Bad Gateway

The proxy gateway server cannot receive the respond

503 - Service Unavailable

Server is overload or maintenance

504 - Gateway Timeout

Server timeout

509 - Concurrency Limit

Please lower the concurrency


Developer
ℹ️
Developer Resources
📖
Developer references & glossary
Any supplementary information you may need

If you have questions about calling Open API, this document provides full request body params and response body.

OpenOcean API Document(opens new window)
Files and modules needed for API users
Here are some modules you need to import in addition to the open API:

Copy
npm install bignumber.js
npm install web3
The web3.js library is a collection of modules that contain functionality for the Ethereum ecosystem. Meanwhile, bignumber is the module used to operate the multiple-precision floating-point number, which is used in all smart contract's number running.

web3.js (opens new window)
bignumber.js (opens new window)
Table of chainId you need for directing your wallet plugin to the blockchain you select.

Chain_Name
Chain_ID
main-pair
Ethereum Mainnet

1

eth-usdt

Binance Smart Chain

56

bnb-busd

Solana Mainnet

--

eth-usdt

Polygon Mainnet

137

matic-usdt

Avalanche

43114

avax-usdt.e

Fantom

250

ftm-usdc

Arbitrum

42161

uni-usdc

Terra Mainnet

columbus-5

luna-ust

Gnosis Mainnet

100

xdai-usdt

Boba Mainnet

288

weth-usdt

Ontology Mainnet

--

wing-ontd

Tron Mainnet

--

trx-usdt

Heco Mainnet

128

ht-usdc

OEC Mainnet

66

okt-usdt

Optimism

10

uni-usdc

Moonriver

1285

eth-usdt

Erc20 Abi: Contains the abi you need to approve your token.

Copy
[{
	"constant": true,
	"inputs": [],
	"name": "name",
	"outputs": [{
		"name": "",
		"type": "string"
	}],
	"payable": false,
	"stateMutability": "view",
	"type": "function"
}, {
	"constant": false,
	"inputs": [{
		"name": "_spender",
		"type": "address"
	}, {
		"name": "_value",
		"type": "uint256"
	}],
	"name": "approve",
	"outputs": [{
		"name": "",
		"type": "bool"
	}],
	"payable": false,
	"stateMutability": "nonpayable",
	"type": "function"
}, {
	"constant": true,
	"inputs": [],
	"name": "totalSupply",
	"outputs": [{
		"name": "",
		"type": "uint256"
	}],
	"payable": false,
	"stateMutability": "view",
	"type": "function"
}, {
	"constant": false,
	"inputs": [{
		"name": "_from",
		"type": "address"
	}, {
		"name": "_to",
		"type": "address"
	}, {
		"name": "_value",
		"type": "uint256"
	}],
	"name": "transferFrom",
	"outputs": [{
		"name": "",
		"type": "bool"
	}],
	"payable": false,
	"stateMutability": "nonpayable",
	"type": "function"
}, {
	"constant": true,
	"inputs": [],
	"name": "decimals",
	"outputs": [{
		"name": "",
		"type": "uint8"
	}],
	"payable": false,
	"stateMutability": "view",
	"type": "function"
}, {
	"constant": true,
	"inputs": [{
		"name": "_owner",
		"type": "address"
	}],
	"name": "balanceOf",
	"outputs": [{
		"name": "balance",
		"type": "uint256"
	}],
	"payable": false,
	"stateMutability": "view",
	"type": "function"
}, {
	"constant": true,
	"inputs": [],
	"name": "symbol",
	"outputs": [{
		"name": "",
		"type": "string"
	}],
	"payable": false,
	"stateMutability": "view",
	"type": "function"
}, {
	"constant": false,
	"inputs": [{
		"name": "_to",
		"type": "address"
	}, {
		"name": "_value",
		"type": "uint256"
	}],
	"name": "transfer",
	"outputs": [{
		"name": "",
		"type": "bool"
	}],
	"payable": false,
	"stateMutability": "nonpayable",
	"type": "function"
}, {
	"constant": true,
	"inputs": [{
		"name": "_owner",
		"type": "address"
	}, {
		"name": "_spender",
		"type": "address"
	}],
	"name": "allowance",
	"outputs": [{
		"name": "",
		"type": "uint256"
	}],
	"payable": false,
	"stateMutability": "view",
	"type": "function"
}, {
	"payable": true,
	"stateMutability": "payable",
	"type": "fallback"
}, {
	"anonymous": false,
	"inputs": [{
		"indexed": true,
		"name": "owner",
		"type": "address"
	}, {
		"indexed": true,
		"name": "spender",
		"type": "address"
	}, {
		"indexed": false,
		"name": "value",
		"type": "uint256"
	}],
	"name": "Approval",
	"type": "event"
}, {
	"anonymous": false,
	"inputs": [{
		"indexed": true,
		"name": "from",
		"type": "address"
	}, {
		"indexed": true,
		"name": "to",
		"type": "address"
	}, {
		"indexed": false,
		"name": "value",
		"type": "uint256"
	}],
	"name": "Transfer",
	"type": "event"
}];
Glossary
Below we explain several terms that will help you start programming.

API
An application programming interface (API) is a set of protocols and codes that determine how different software platforms communicate and share information. APIs define different types of requests and calls that can be made, the data types that can be used, and how to make these requests. It serves as an intermediary between different software systems. A developer can use an API to incorporate features of an external application into their own software. By allowing different platforms to communicate, APIs enhance interoperability across the web.

via Gemini(opens new window)

SDK
A software development kit (SDK) is a collection of software development tools in one installable package.They ease creation of applications by having compiler, debugger and perhaps a software framework.They are normally specific to a hardware platform and operating system combination.

via Binah(opens new window)

Wallet
In the Crypto Defi world, wallets are software that can be used to view cryptocurrency balances and make transactions. Each wallet type is a little bit different, but in general, any given wallet will work with one or more cryptocurrencies and will be able to store one or more cryptocurrency-specific “public addresses. Cryptocurrency itself is not actually “stored” in a wallet, it is stored on a coin’s blockchain. Your wallet is simply software designed to interact with the blockchain. That is the magic part of Defi application, you can finish you trade business on the customer side!

via crypto(opens new window)

Contract
Smart contracts are simply programs stored on a blockchain that run when predetermined conditions are met. They typically are used to automate the execution of an agreement so that all participants can be immediately certain of the outcome, without any intermediary's involvement or time loss.

via IBM(opens new window)

OOP
As a developer, you should know the Defi project programing is a good case for Object Oriented Programming (OOP). OOP is a popular programming paradigm based on the concept of "Object", which can contain data and code: data in the form of fields (often known as attributes or properties), and code, in the form of procedures (often known as methods). In Defi programming, you have the two most important "Objects" to work with, wallet object and contract object. They are the tools you need to interact with blockchain, and these two objects have all the medhods you need for your transaction.

via TechTarget(opens new window)

Arbitrage
To arbitrage is to get benefit from the price difference of an asset or security between two markets for profit. We can make an example in the crypto case, some token is selling in market A in $3 but selling in market B with $5. So there is $2 per token's profit if someone sold the tokens he/she get from market A to market B. Arbitrage is a necessary financial mechanism that keeps prices consistent between different exchanges and wider markets.

via Gemini(opens new window)

GasPrice
Gas refers to the fee, or pricing value, required to successfully conduct a transaction or execute a contract on the Ethereum blockchain platform. Priced in small fractions of the cryptocurrency ether (ETH), commonly referred to as gwei and sometimes also called nanoeth, the gas is used to allocate resources of the Ethereum virtual machine (EVM) so that decentralized applications such as smart contracts can self-execute in a secured but decentralized fashion.

via investopedia(opens new window)

Slippage
Slippage happens when traders have to settle for a different price than what they initially requested due to a movement in price between the time the order (say for Bitcoin) enters the market and the execution of a trade. This phenomenon can occur in all markets, like forex and stocks. However, it is more frequent, and a lot worse, in crypto markets (especially on decentralized exchanges like Uniswap) due to the high levels of price volatility.



SDK
Logo
GitHub - openocean-finance/openocean-api: openocean sdk
GitHub
Install OpenOcean Aggregator SDK
You can install the SDK by npm.n

Copy
npm i @openocean.finance/openocean-sdk
Or, if you use yarn as your module management tool.

Copy
yarn add @openocean.finance/openocean-sdk
Or, if you want to build up a jwallet and contract object by yourself, you will need web3 and bignumber.js.

Copy
npm install bignumber.js
npm install web3
How to use the sdk in your project
Copy
import { OpenoceanSdk } from '@openocean.finance/openocean-sdk'
const openoceanSdk = new OpenoceanSdk()
const { api, swapSdk, config } = openoceanSdk
You can then use all the functions explored by the SDK (API and swapSdk).

Start programing now!
Before you start developing a DeFi trading project, you should understand the industry’s most general DeFi trading workflow. Here is the process we designed for the user to make a transaction:

Choose a chain.

Choose your wallet.

Choose the token pair.

Input the amount you want to trade.

Swap. To make this process successful, we recommend using the Open API and Wallet plugin we provide to achieve DeFi trading.

Full vue example
Copy

<template>
  <div id="app">
    <div style="color:blue">
      <div v-if="chain">chain:{{ chain.chainName }}</div>
      <div v-if="myWallet"> walletName:{{ myWallet.name }}</div>
      <div v-if="myWallet">address:{{ myWallet.address }}</div>
      <div v-if="inToken">
        inToken:{{ inToken.symbol }} Balance:{{ inTokenBalance }}
      </div>
      <div v-if="outToken">
        outToken:{{ outToken.symbol }} Balance:{{ outTokenBalance }}
      </div>
    </div>
    <div>
      <div>
        <h3>ConnectWallet</h3>
        <button @click="connectWallet('eth')" style="margin-right:10px">connectWallet eth</button>
        <button @click="connectWallet('bsc')" style="margin-right:10px">connectWallet bsc</button>
        <button @click="connectWallet('polygon')" style="margin-right:10px">connectWallet polygon</button>
      </div>
      <div>
        <h3>Quote</h3>
        <div v-if="this.inToken && this.outToken">
          {{ this.inAmount }}{{ this.inToken.symbol }} swap to {{ outAmount }} {{ this.outToken.symbol }}
        </div>
        <button @click="quote">quote</button>
      </div>
      <div>
        <h3>Swap</h3>
        <button @click="swap">swap</button>
      </div>
      <div>
        <h3>GetBalance</h3>
        <button @click="getBalance">GetBalance</button>
      </div>
    </div>
  </div>
</template>

<script>
import { OpenoceanSdk } from '@openocean.finance/openocean-sdk';
import BigNumber from 'bignumber.js';

import VConsole from 'vconsole';
const vConsole = new VConsole({ theme: 'dark' });


const genSdk = new OpenoceanSdk()
const { api, swapSdk, config } = genSdk

export default {
  name: 'App',
  components: {
  },
  data () {
    return {
      chainName: 'bsc',
      walletName: 'MetaMask',
      inToken: null,
      outToken: null,
      gasPrice: 5,
      inTokenBalance: null,
      outTokenBalance: null,
      inAmount: 1,
      outAmount: null,

      myWallet: null,
      chain: null,
    }
  },


  async created () {

  },
  methods: {
    async getGasPrice () {
      this.gasPrice = await api.getGasPrice({
        chain: this.chainName,
      })
    },
    async getTokenList () {
      let { data } = await api.getTokenList(
        { chain: this.chainName }
      )
      this.inToken = data.find(item => item.symbol == 'USDC')
      this.outToken = data.find(item => item.symbol == 'BUSD')
      this.getBalance()
    },
    async quote () {
      let response = await api.quote({
        chain: this.chainName,
        inTokenAddress: this.inToken.address,
        outTokenAddress: this.outToken.address,
        amount: this.inAmount,
        gasPrice: this.gasPrice
      })
      if (response.code == 200) {
        this.outAmount = new BigNumber(response.data.outAmount).div(10 ** this.outToken.decimals).toFixed(4)
        // alert('outAmount:' + this.outAmount)
      } else {
        alert('Error:' + response.message)
      }
    },
    async swap () {
      if (!this.myWallet) {
        alert('Please connect the wallet.')
        return
      }
      if (this.inTokenBalance < this.inAmount) {
        alert(`${this.inToken.symbol} Insufficient balance.`)
        return
      }
      let { data } = await api.exchange({
        chain: this.chainName
      })
      let allowance = await this.getAllowance(data.approveContract)
      if (new BigNumber(allowance).lt(this.inAmount)) {
        await this.approve(data.approveContract)
        return
      }
      let response = await swapSdk.swapQuote({
        chain: this.chainName,
        inTokenAddress: this.inToken.address,
        outTokenAddress: this.outToken.address,
        amount: this.inAmount,
        gasPrice: this.gasPrice,
        slippage: 1, // 1%
        account: this.myWallet.address,
      })
      if (response.code == 200) {
        swapSdk.swap(response.data)
          .on('error', (error) => {
            debugger
          })
          .on('transactionHash', (hash) => {
            debugger
          })
          .on('receipt', (data) => {
            debugger
            this.getBalance()
          })
          .on('success', (data) => {
            debugger
          })
      } else {
        alert('Error:' + response.message)
      }

    },
    async connectWallet (chainName) {
      try {
        let AllChainNames = config.chains.chainNames
        let AllWalletNames = config.wallets.walletList.map(item => item.key)
        // ["MetaMask","CryptoCom","TrustWallet","OKXWallet","BscWallet","UnstoppableDomains","WalletConnect","CoinbaseWallet","SafePalWallet","BraveWallet","BitKeepWallet","XDEFIWallet","OntoWallet","Coin98Wallet","TokenPocket","CloverWallet","ImTokenWallet","MathWallet","Cyano","OntoMobile","TronLink","Sollet","SolflareWallet","Phantom","TerraStation","GnosisSafeWallet","SlopeWallet","KeplrWallet","BloctoWallet","PetraWallet","MartianWallet","PontemWallet","NearWallet","MyNearWallet","MeteorWallet","SenderWallet"]
        // ["eth","ropsten","rinkeby","bsc","solana","flow","polygon","avax","fantom","arbitrum","terra","xdai","boba","ont","ontevm","metis","tron","heco","okex","optimism","harmony","dot","neo","aurora","cronos","moonriver","bsctest","aptos","near","cosmos","osmosis","iris","kava","celo","klaytn","zksync"]
        if (chainName) this.chainName = chainName
        let data = await swapSdk.connectWallet({
          chainName: this.chainName,
          walletName: this.walletName
        })
        if (data) {
          this.myWallet = data.wallet
          this.chain = data.chain

          this.getTokenList()
          this.getGasPrice()
        }
      } catch (error) {
        this.myWallet = null
        this.chain = null
      }
    },
    async getBalance () {
      if (!this.myWallet) {
        alert('Please connect the wallet.')
        return
      }
      let inBalance = await swapSdk.getBalance({
        account: this.myWallet.address,
        chain: this.chainName,
        tokenAddressOrSymbol: this.inToken.address,
        decimals: this.inToken.decimals,
      })
      this.inTokenBalance = inBalance.short

      let outBalance = await swapSdk.getBalance({
        account: this.myWallet.address,
        chain: this.chainName,
        tokenAddressOrSymbol: this.outToken.address,
        decimals: this.outToken.decimals,
      })
      this.outTokenBalance = outBalance.short
    },
    async getAllowance (approveContract) {

      let allowance = await swapSdk.getAllowance({
        chain: this.chainName,
        decimals: this.inToken.decimals,
        tokenAddress: this.inToken.address,
        approveContract: approveContract,
        account: this.myWallet.address
      })
      return allowance
    },
    async approve (approveContract) {
      let approve = await swapSdk.approve({
        chain: this.chainName,
        tokenAddress: this.inToken.address,
        approveContract: approveContract,
        gasPrice: this.gasPrice,
        decimals: this.inToken.decimals,
        amount: this.inAmount,
      })
      if (!approve.code) {
        approve.on('error', (error) => {
          debugger
        })
          .on('transactionHash', (hash) => {
            debugger
          })
          .on('receipt', (data) => {
            debugger
          })
          .on('success', (data) => {
            debugger
          })
      }
    }
  }


}

</script>

<style></style>
Choose Pair List
You can call the get Token List API to get all the available tokens we have on the blockchain you choose.

Method: Get

URL: https://open-api.openocean.finance/v3/:chain/tokenList

Parameters:

Parameter
Type
Example
Description
chain

string

avax

The chain name you want to search token

Your request will look like this:

Copy
https://open-api.openocean.finance/v3/bsc/tokenList
And your response will look like this:

Copy
{
    code: 200,
    data:  [
        {
            "id":2377,
            "code":"grove",
            "name":"GroveCoin",
            "address":"0xf33893de6eb6ae9a67442e066ae9abd228f5290c",
            "decimals":8,
            "symbol":"GRV",
            "icon":"https://s3.openocean.finance/token_logos/logos/1681183267288_9630165967657189.png",
            "chain":"bsc",
            "createtime":"2023-04-11T03:21:09.000Z",
            "hot":null,
            "sort":"2023-04-11T03:21:09.000Z",
            "chainId":null,
            "customSymbol":null,
            "customAddress":null,
            "usd":"0.948606"
        },
        ...
    ...
    ]
}
You need to save the token information you need for further operations.

Here is the SDK method for you to get the token list

Copy
async getTokenList () {
  let { data } = await api.getTokenList(
    { chain: 'bsc' }
  )
   this.inToken = data.find(item => item.symbol == 'USDC')
   this.outToken = data.find(item => item.symbol == 'BUSD')
}
Connect Wallet
Connect wallet is the first step you need to participate in DeFi trading. For example, you want to connect to MetaMask, so you have to get the MetaMask wallet constructor from OpenOcean wallet.

Please note that multiple browser wallet will have conflict, please only open a purse, (metaMask trustWallet, coin98Wallet) can't open at the same time.

Copy
import { MetaMask } from "@openocean.finance/wallet";

const connectWallet( params ) {
    const myWallet = new MetaMask()
    const result = await myWallet.requestConnect(params.chainId); 
    // you can use the requestConnect function to trigger your wallet
}
Or you can trigger the wallet directly by the SDK.

Copy
async connectWallet () {
  try {
    let AllChainNames = config.chains.chainNames
    let AllWalletNames = config.wallets.walletList.map(item => item.key)
    // ["MetaMask","CryptoCom","TrustWallet","OKXWallet","BscWallet","UnstoppableDomains","WalletConnect","CoinbaseWallet","SafePalWallet","BraveWallet","BitKeepWallet","XDEFIWallet","OntoWallet","Coin98Wallet","TokenPocket","CloverWallet","ImTokenWallet","MathWallet","Cyano","OntoMobile","TronLink","Sollet","SolflareWallet","Phantom","TerraStation","GnosisSafeWallet","SlopeWallet","KeplrWallet","BloctoWallet","PetraWallet","MartianWallet","PontemWallet","NearWallet","MyNearWallet","MeteorWallet","SenderWallet"]
    // ["eth","ropsten","rinkeby","bsc","solana","flow","polygon","avax","fantom","arbitrum","terra","xdai","boba","ont","ontevm","metis","tron","heco","okex","optimism","harmony","dot","neo","aurora","cronos","moonriver","bsctest","aptos","near","cosmos","osmosis","iris","kava","celo","klaytn","zksync"]
    
    let data = await swapSdk.connectWallet({
      chainName: this.chainName,
      walletName: this.walletName
    })
    if (data) {
      this.myWallet = data.wallet
      // this.chain = data.chain
      // this.getBalance()
    }
  } catch (error) {
    this.myWallet = null
    this.chain = null
  }
}
Run the contract in project
Once you get your wallet connected, you can use Web3.js or ethers. These are tools to create the operable object for the contract, which serves for token approving, balance checking, and swapping.

Here is the example to init a contract object for you to call the abi in contract

Copy
const { sdk } = myWallet;
contract = new sdk.eth.Contract(Contract_abi, inToken_address);
// For example, by running this code, you get the contract to check the inToken's balance
Or, if you want to use ethers.

Copy
const { sdk } = myWallet;
const { currentProvider } = sdk;
myEtherWallet = new ethers.providers.Web3Provider(currentProvider);
//transfer your web3 wallet object to ether
signer = myEtherWallet.getSigner();
contract = new ethers.Contract(ContractAddress, contract.abi, signer);
Get Balance
Once your wallet is connected and the address is displayed, you can use the SDK or directly use wallet object to get the balance from your wallet.

Use wallet API:

Copy
const { sdk } = myWallet;
const contract = new sdk.eth.Contract(ERC20_abi, inToken);
balance = await contract.methods.balanceOf(result.address).call();
//Save the result object which can be used here for balance checking.
Use Open API:

Copy
getBalance() {
    if(this.address) {
        let params = {
            chain:'bsc',
            chainId: 56,
            account: your wallet address,
            inTokenAddress:`${previousTokenAddress},${nextTokenAddress}`
            };
        axios.get(`https://open-api.openocean.finance/v3/${params.chain}/getBalance`, { params }).then(res => {
            const { data } = res.data
            const previousBalance = data[0].balance
            const nextBalance = data[1].balance
        }).catch(e => console.log(e));
    }
},
Use SDK:

Copy
    
async getBalance () {
  if (!this.myWallet) {
    alert('Please connect the wallet.')
    return
  }
  let inBalance = await swapSdk.getBalance({
    account: this.myWallet.address,
    chain: this.chainName,
    tokenAddressOrSymbol: this.inToken.address,
    decimals:this.inToken.decimals,
  })
  this.inTokenBalance = inBalance.short

  let outBalance = await swapSdk.getBalance({
    account: this.myWallet.address,
    chain: this.chainName,
    tokenAddressOrSymbol: this.outToken.address,
    decimals:this.outToken.decimals,
  })
  this.outTokenBalance = outBalance.short
}
GetGasPrice
Use Open API:

Copy

getBalance () {
    let chainName='bsc';
    let data=await axios.get(`https://open-api.openocean.finance/v3/${chainName}/gasPrice`)
}
Use SDK:

Copy

async getGasPrice () {
  this.gasPrice = await api.getGasPrice({
    chain: this.chainName,
  })
}
Approve
Approving assets is necessary for DeFi users to authorize the contract to use their tokens to swap. As with the getBalance method, you can use the wallet method or directly use our SDK to get a specific token approved for trading.

Use wallet Function:

Copy
const gas = await contract.methods.approve(toContract, approveAmount).estimateGas({ from: account });
// get your gas fee
return await contract.methods.approve(toContract, approveAmount).send({
    from: account,
    gasPrice,
    gas,
});
Use SDK:

Copy

async approve (approveContract) {
  let approve = await swapSdk.approve({
    chain: this.chainName,
    tokenAddress: this.inToken.address,
    approveContract: approveContract,
    gasPrice: this.gasPrice,
    decimals: this.inToken.decimals,
    amount: this.inAmount
  })
  if (!approve.code) {
    approve.on('error', (error) => {
      debugger
    })
      .on('transactionHash', (hash) => {
        debugger
      })
      .on('receipt', (data) => {
        debugger
      })
      .on('success', (data) => {
        debugger
      })
  }
}
Quote
You can directly use Open API to quote the token exchange amount.

Method: Get

URL: https://open-api.openocean.finance/v3/:chain/quote

Parameters:

Parameter
Type
Example
Description
chain

string

bsc, avax, fantom

platform(openoceanv2,1inch,matcha,paraswap)

inTokenAddress

string

0x9029FdFAe9A03135846381c7cE16595C3554e10A

sell token address

outTokenAddress

string

0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

buy token address

amount

number

10

sell amount

gasPrice

number

5

you can set it yourself or get it through GetGasPrice

slippage

number

1

1 equals 1%, ranges 0.01% to100%

For example, you want to pick up the price between OOE and BNB by Axios.

Copy
const res = await axios.get( "https://open-api.openocean.finance/v3/bsc/quote", {
    chain: 'bsc',
    inTokenAddress: '0x9029FdFAe9A03135846381c7cE16595C3554e10A',
    outTokenAddress: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    amount: 10,
    gasPrice: 5,
    slippage:1,
}).then((res) => {
    const result = res.data
}).catch((err) => {
    throw new Error(err)
})
If you call it right, you will get a result like this:

Copy
 {
    code: 200,
    data: {
        "inToken": {
            "symbol": "AUSD",
            "name": "Avaware USD",
            "address": "0x783C08b5F26E3daf8C4681F3bf49844e425b6393",
            "decimals": 18
        },
        "outToken": {
            "symbol": "EMBR",
            "name": "EmbrToken",
            "address": "0xD81D45E7635400dDD9c028839e9a9eF479006B28",
            "decimals": 18
        },
        "inAmount": "5000000000000000000",
        "outAmount": "126261357830302882735",
        "estimatedGas": "189669",
        "dexes": [
            {
                "dexIndex": 1,
                "dexCode": "SushiSwap",
                "swapAmount": "0"
            },
            ...
        ],
        "path": {
        }
    }
 }
or the api modules in SDK: For example we quote Ont chain

Copy

async quote () {
      let response = await api.quote({
        chain: this.chainName,
        inTokenAddress: this.inToken.address,
        outTokenAddress: this.outToken.address,
        amount: this.inAmount,
        gasPrice: this.gasPrice
      })
      if (response.code == 200) {
        this.outAmount = new BigNumber(response.data.outAmount).div(10 ** this.outToken.decimals).toFixed(4)
        // alert('outAmount:' + this.outAmount)
      } else {
        alert('Error:' + response.message)
      }
    }
Swap
Here is the last step! Now you have several ways to swap the token you selected. You can directly use our swap API to trigger the trade, which will not awaken your personal wallet, but you have to provide your private key to the API. You can also use the swap_quote API to get the transaction body from our API server. Here is a case for you to make a transaction on BNB Chain.

The work flow we recommand for API users, is using Swapquote API to get transaction body, then use the wallet to request your transaction on chain.

Copy
async swap() {
    if(this.address && this.inAmount > 0) {
        let params = {
        chain: 'bsc',
        inTokenAddress: '0x9029FdFAe9A03135846381c7cE16595C3554e10A',
        outTokenAddress: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
        amount: 5,
        gasPrice: 5,
        slippage:100,
        };
    const res = await axios.get("https://open-api.openocean.finance/v3/bsc/swap_quote?inTokenAddress=0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE&outTokenAddress=0x55d398326f99059ff775485246999027b3197955&amount=5&gasPrice=5&slippage=100&account=0x929B44e589AC4dD99c0282614e9a844Ea9483C69");
    if(res) {
        const {estimatedGas,data,gasPrice} = res.data.data;
        const swapParams = {
            from:this.address,
            to:'0x6352a56caadc4f1e25cd6c75970fa768a3304e64', //this is the only contract you can use if you decide to make transaction by our API.
            gas: estimatedGas,
            gasPrice: gasPrice,
            data
            }; 
        const result = await this.myWallet.sdk.eth.sendTransaction(swapParams)
        };
    else {
       return
    },
On the SDK workflow:

For example, we want make a swap on terra chain.

Copy

async swap () {
      if (!this.myWallet) {
        alert('Please connect the wallet.')
        return
      }
      if (this.inTokenBalance < this.inAmount) {
        alert(`${this.inToken.symbol} Insufficient balance.`)
        return
      }
      let { data } = await api.exchange({
        chain: this.chainName
      })
      let allowance = await this.getAllowance(data.approveContract)
      if (new BigNumber(allowance).lt(this.inAmount)) {
        await this.approve(data.approveContract)
        return
      }
      let response = await swapSdk.swapQuote({
        chain: this.chainName,
        inTokenAddress: this.inToken.address,
        outTokenAddress: this.outToken.address,
        amount: this.inAmount,
        gasPrice: this.gasPrice,
        slippage: 1, // 1%
        account: this.myWallet.address,
      })
      if (response.code == 200) {
        swapSdk.swap(response.data)
          .on('error', (error) => {
            debugger
          })
          .on('transactionHash', (hash) => {
            debugger
          })
          .on('receipt', (data) => {
            debugger
            this.getBalance()
          })
          .on('success', (data) => {
            debugger
          })
      } else {
        alert('Error:' + response.message)
      }
    }
