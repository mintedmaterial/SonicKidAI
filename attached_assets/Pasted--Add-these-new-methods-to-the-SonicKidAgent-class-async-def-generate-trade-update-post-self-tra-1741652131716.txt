# Add these new methods to the SonicKidAgent class

async def generate_trade_update_post(self, trade_result: Dict[str, Any]) -> str:
    """Generate an X post about a recent trade"""
    try:
        if not trade_result.get('success'):
            return f"Trade alert: Attempted {trade_result.get('trade_type', 'swap')} on Sonic network failed. " \
                  f"Reason: {trade_result.get('error', 'unknown')}. Monitoring for next opportunity! #SonicLabs #CrossChain"

        trade_params = trade_result.get('result', {})
        token = trade_params.get('token_address', 'unknown token')[-6:]  # Last 6 chars for brevity
        amount = float(trade_params.get('amount', 0))
        chain = trade_params.get('source_chain', 'Sonic')

        sentiment = await self.analyze_router_sentiment('Sonic')
        sentiment_emoji = "🚀" if sentiment['sentiment'] == 'positive' else "📉" if sentiment['sentiment'] == 'negative' else "➡️"

        return f"{sentiment_emoji} Just executed a {trade_result.get('trade_type', 'swap')} on {chain}: " \
              f"{amount:.2f} units of token (...{token}). Tx: {trade_params.get('tx_hash', 'pending')[:10]}... " \
              f"Confidence: {sentiment['confidence']:.2f} #SonicLabs #AutomatedTrading"
    except Exception as e:
        logger.error(f"Error generating trade post: {str(e)}")
        return "Trade update: Processing latest Sonic Labs trade... stay tuned! #SonicLabs"

async def generate_market_insight_post(self) -> str:
    """Generate an X post with market insights from opportunities"""
    try:
        opportunities = await self.check_opportunities()
        if not opportunities:
            return "Sonic Labs market watch: No clear signals yet. Scanning cross-chain opportunities... " \
                  "#SonicLabs #MarketAnalysis"

        # Pick the most promising opportunity
        best_opp = max(opportunities, key=lambda x: x['analysis']['confidence'])
        symbol = best_opp['analysis']['symbol']
        signal = best_opp['analysis']['signal']
        confidence = best_opp['analysis']['confidence']
        volatility = best_opp['analysis']['volatility']

        trend = "bullish" if signal == "buy" else "bearish"
        action = "entering" if signal == "buy" else "exiting"
        
        return f"📊 Sonic Labs Market Insight: {symbol} showing {trend} signals! " \
              f"Confidence: {confidence:.2%}, Volatility: {volatility:.2%}. " \
              f"Agent {self.name} {action} position. #SonicLabs #CryptoTrading"
    except Exception as e:
        logger.error(f"Error generating market insight post: {str(e)}")
        return "Market update: Analyzing Sonic Labs ecosystem trends... more insights soon! #SonicLabs"

async def generate_ecosystem_update_post(self) -> str:
    """Generate an X post about Sonic Labs ecosystem sentiment"""
    try:
        tweets = await self.get_relevant_tweets("Sonic Labs", limit=3)
        sentiment = await self.analyze_router_sentiment("Sonic")
        
        positive_count = sentiment['sentiment_breakdown']['positive']
        total_tweets = sentiment['tweet_count']
        
        vibe = ("🔥 buzzing" if positive_count > total_tweets/2 else 
               "🧐 mixed" if positive_count > 0 else 
               "❄️ quiet")
        
        latest_tweet = tweets[0]['content'][:50] + "..." if tweets else "community chatter"

        return f"🌍 Sonic Labs Ecosystem Pulse: {vibe} with {total_tweets} recent mentions. " \
              f"Sentiment: {sentiment['sentiment']} ({sentiment['confidence']:.2f}). " \
              f"Latest: '{latest_tweet}' #SonicLabs #CrossChainVibes"
    except Exception as e:
        logger.error(f"Error generating ecosystem post: {str(e)}")
        return "Sonic Labs ecosystem update: Gathering community insights... #SonicLabs"

async def create_content_batch(self) -> List[str]:
    """Create a batch of content posts for X"""
    posts = []
    
    # Add trade update if there's recent activity
    if self.success_history:
        latest_trade = self.success_history[-1]
        trade_post = await self.generate_trade_update_post(latest_trade)
        posts.append(trade_post)
    
    # Add market insight
    market_post = await self.generate_market_insight_post()
    posts.append(market_post)
    
    # Add ecosystem update
    eco_post = await self.generate_ecosystem_update_post()
    posts.append(eco_post)
    
    return posts

# Modify run_loop to include content creation
async def run_loop(self):
    """Main agent loop with content creation"""
    while True:
        try:
            # Check for opportunities
            opportunities = await self.check_opportunities()
            
            for opp in opportunities:
                trade_result = await self.execute_trade(opp)
                if trade_result.get('success'):
                    logger.info(f"Successfully executed trade: {opp}")
                    # Generate immediate trade post
                    post = await self.generate_trade_update_post(trade_result)
                    logger.info(f"Generated trade post: {post}")
                    # Here you could add code to actually post to X if API available
                    
            # Generate periodic content batch every hour
            if int(time.time()) % 3600 < 300:  # First 5 minutes of each hour
                content_batch = await self.create_content_batch()
                for post in content_batch:
                    logger.info(f"Generated content post: {post}")
                    # Here you could add code to post to X
                    
            # Wait for configured delay
            await asyncio.sleep(self.config.get('loop_delay', 300))

        except Exception as e:
            logger.error(f"Error in main loop: {str(e)}")
            await asyncio.sleep(60)  # Error cooldown

# Example usage:
async def main():
    # Mock config and dependencies
    config = {
        'default_source_chain': 'Sonic',
        'loop_delay': 300,
        'trading': {'networks': {}}
    }
    trading = MockTradingConnection()
    processor = TradeProcessor()  # Assuming this exists elsewhere
    
    # Initialize agent
    agent = SonicKidAgent("SonicKid1", config, trading, processor)
    await agent.initialize()
    
    # Generate some sample content
    content_batch = await agent.create_content_batch()
    for post in content_batch:
        print(f"Generated X post: {post}")
    
    # Start the main loop
    await agent.run_loop()

if __name__ == "__main__":
    asyncio.run(main())