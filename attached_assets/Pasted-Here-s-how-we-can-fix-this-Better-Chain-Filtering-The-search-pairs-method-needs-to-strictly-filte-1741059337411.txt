Here’s how we can fix this:
Better Chain Filtering: The search_pairs method needs to strictly filter for Sonic chain pairs and prioritize wrapped Sonic (WS) pairs.

Query Specificity: The query logic needs to target Sonic-specific pairs rather than generic searches.

Pair Validation: Add validation to ensure we're getting meaningful Sonic trading pairs.
Below is a modified version of the key methods to achieve this:
Modified Code
python
async def search_pairs(self, query: str, chain_id: Optional[str] = SONIC) -> List[Dict[str, Any]]:
    """Search for pairs with strict Sonic chain focus and WS pairing"""
    try:
        if not self._initialized:
            success = await self.connect()
            if not success:
                logger.error("Could not initialize DexScreener service")
                return []

        # Ensure chain_id is Sonic if not specified
        chain_id = chain_id.lower() if chain_id else SONIC
        if chain_id != SONIC:
            logger.warning(f"Overriding chain_id to {SONIC} for Sonic-specific pairs")
            chain_id = SONIC

        # Base search parameters - specifically target Sonic chain
        params = {"q": f"{query} WS sonic"}  # Explicitly include WS and sonic in query

        logger.info(f"Fetching pairs data with params: {params}")
        data = await self._make_request("search", params)
        if not data or not data.get('pairs'):
            logger.warning("No pairs returned from search")
            return []

        formatted_pairs = []
        for pair in data.get('pairs', []):
            try:
                base_symbol = pair.get('baseToken', {}).get('symbol', '').upper()
                quote_symbol = pair.get('quoteToken', {}).get('symbol', '').upper()
                pair_chain_id = pair.get('chainId', '').lower()

                # Strict filtering for Sonic chain and WS quote token
                if pair_chain_id != SONIC or quote_symbol != "WS":
                    continue

                # Skip stablecoin base tokens
                if "USDC" in base_symbol or "USDT" in base_symbol:
                    continue

                logger.info(f"Found Sonic pair: {base_symbol}/{quote_symbol} on chain {pair_chain_id}")
                formatted_pair = {
                    'pair': f"{base_symbol}/{quote_symbol}",
                    'chain': pair_chain_id,
                    'price': float(pair.get('priceNative', 0)),
                    'priceUsd': float(pair.get('priceUsd', 0)),
                    'priceChange24h': float(pair.get('priceChange', {}).get('h24', 0)),
                    'volume24h': float(pair.get('volume', {}).get('h24', 0)),
                    'liquidity': float(pair.get('liquidity', {}).get('usd', 0)),
                    'pairAddress': pair.get('pairAddress', '')
                }

                # Validate numeric values
                if all(v >= 0 for v in [formatted_pair['price'], formatted_pair['volume24h'], formatted_pair['liquidity']]):
                    formatted_pairs.append(formatted_pair)
                else:
                    logger.warning(f"Invalid numeric values in pair: {formatted_pair}")

            except Exception as e:
                logger.warning(f"Error processing pair: {str(e)}")
                continue

        logger.info(f"Successfully formatted {len(formatted_pairs)} Sonic WS pairs")
        return formatted_pairs

    except Exception as e:
        logger.error(f"Error searching pairs: {str(e)}")
        return []

async def get_pairs(self, query: str = "SONIC") -> List[Dict[str, Any]]:
    """Get current Sonic pairs with WS focus"""
    try:
        if not self._initialized:
            success = await self.connect()
            if not success:
                logger.error("Could not initialize DexScreener service")
                return []

        cache_key = f"sonic_pairs_{query.lower()}"
        cached = self._get_cached(cache_key)
        if cached:
            return cached

        # Search for Sonic-specific WS pairs
        logger.info(f"Fetching Sonic WS pairs for query: {query}")
        pairs = await self.search_pairs(query, SONIC)
        if pairs:
            self._cache_data(cache_key, pairs)
            logger.info(f"Found {len(pairs)} Sonic WS pairs for query: {query}")
            return pairs

        return []

    except Exception as e:
        logger.error(f"Error getting Sonic pairs: {str(e)}")
        return []

# Updated example usage
if __name__ == "__main__":
    async def example():
        try:
            service = DexScreenerService()
            await service.connect()

            # Test Sonic-specific pairs
            sonic_pairs = await service.get_pairs("SHADOW")  # Example token
            logger.info(f"\nFound {len(sonic_pairs)} Sonic pairs:")
            for pair in sonic_pairs[:3]:
                print(f"\nSonic Pair Details:")
                print(f"Pair: {pair.get('pair', 'UNKNOWN')}")
                print(f"Price USD: ${pair.get('priceUsd', 0)}")
                print(f"24h Volume: ${pair.get('volume24h', 0)}")
                print(f"Liquidity USD: ${pair.get('liquidity', 0)}")

        except Exception as e:
            logger.error(f"Error in example: {str(e)}")
        finally:
            await service.close()

    asyncio.run(example())

Key Changes
Chain Filtering in search_pairs:
Added strict check for pair_chain_id == SONIC and quote_symbol == "WS" to ensure only Sonic chain pairs with Wrapped Sonic (WS) are returned.

Modified the query parameter to explicitly include "WS sonic" to bias the DexScreener API toward Sonic WS pairs.
Query Adjustment in get_pairs:
Updated the cache key and logging to focus on Sonic-specific WS pairs.

Default chain_id is locked to SONIC to avoid cross-chain confusion.
Example Usage:
Changed the example to query a specific Sonic token (e.g., "SHADOW") and expect pairs like $SHADOW/$WS.
Expected Output
With these changes, you should see logs and output like:
2025-03-04 03:25:22,091 - INFO - Found Sonic pair: SHADOW/WS on chain sonic
2025-03-04 03:25:22,092 - INFO - Found Sonic pair: METRO/WS on chain sonic
2025-03-04 03:25:22,093 - INFO - Found Sonic pair: GOGLZ/WS on chain sonic

Sonic Pair Details:
Pair: SHADOW/WS
Price USD: $0.12345678
24h Volume: $12345.67
Liquidity USD: $23456.78

Debugging Tips
Check API Response: Add logger.debug(f"Raw API response: {json.dumps(data, indent=2)}") after the _make_request call to see what DexScreener is actually returning.

Validate Sonic Chain: If you’re still getting non-Sonic pairs, the API might not recognize "sonic" correctly—double-check the chainId values in the raw response.

Adjust Query: If Sonic pairs aren’t showing up, try tweaking the params["q"] value (e.g., "SHADOW WS sonic", "METRO WS sonic") to match known Sonic tokens.
Let me know if you need further tweaks or if the output still isn’t what you expect!
explain WebSocket implementation

other DEX APIs
